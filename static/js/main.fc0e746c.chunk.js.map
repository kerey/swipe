{"version":3,"sources":["Swipeable/component.tsx","Swipeable/index.ts","SwipeableAction/component.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Swipeable","children","actions","listElement","useRef","actionsRef","draggedRef","dragStartXRef","leftRef","showActionsRef","actionsWidth","length","updatePosition","current","requestAnimationFrame","Math","abs","style","marginLeft","width","onMove","left","onMouseMove","event","clientX","onTouchMove","evt","targetTouches","onDragStart","onDragEnd","onDragEndMouse","preventDefault","window","removeEventListener","onDragEndTouch","useEffect","addEventListener","className","ref","draggable","onMouseDown","onTouchStart","touch","SwipeableAction","text","backgroundColor","App","id","title","description","map","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc0e746c.chunk.js","sourcesContent":["import {FC, useEffect, useRef, useState} from \"react\";\nimport {SwipeableProps} from \"./props\";\nimport './style.css';\n\nexport const Swipeable: FC<SwipeableProps> = ({children, actions}) => {\n    const listElement = useRef<any>(null);\n    const actionsRef = useRef<any>(null);\n\n    const draggedRef = useRef(false);\n    const dragStartXRef = useRef(0);\n    const leftRef = useRef(0);\n    const showActionsRef = useRef(false);\n\n    const actionWidth = 100; // Todo: Set action width?\n    const actionsWidth = actionWidth * actions.length;\n\n    const updatePosition = () => {\n        if (draggedRef.current) {\n            // For updating DOM\n            requestAnimationFrame(updatePosition);\n        }\n        if (Math.abs(leftRef.current) >= actionsWidth) {\n            // For fixing actions menu to the right\n            showActionsRef.current = true;\n            listElement.current.style.marginLeft = `${-actionsWidth}px`;\n            actionsRef.current.style.width = `${actionsWidth}px`;\n        } else {\n            listElement.current.style.marginLeft = `${leftRef.current}px`;\n            actionsRef.current.style.width = `${Math.abs(leftRef.current)}px`;\n        }\n    }\n    const onMove = (left: number) => {\n        // Left move\n        if (left < 0) {\n            // When menu is fixed\n            if (showActionsRef.current) {\n                leftRef.current = actionsWidth;\n            } else {\n                leftRef.current = left;\n            }\n        } else {\n            // Right move\n            showActionsRef.current = false;\n            leftRef.current = 0;\n        }\n    }\n    const onMouseMove = (event: any) => {\n        const left = event.clientX - dragStartXRef.current;\n        onMove(left);\n    }\n    function onTouchMove(evt: any) {\n        const touch = evt.targetTouches[0];\n        const left = touch.clientX - dragStartXRef.current;\n        onMove(left);\n    }\n\n    const onDragStart = (clientX: number) => {\n        draggedRef.current = true;\n        dragStartXRef.current = clientX;\n        requestAnimationFrame(updatePosition);\n    };\n    const onDragStartMouse = (event: any) => {\n        event.preventDefault();\n        onDragStart(event.clientX);\n        window.addEventListener(\"mousemove\", onMouseMove);\n    }\n    function onDragStartTouch(event: any) {\n        event.preventDefault();\n        const touch = event.targetTouches[0];\n        onDragStart(touch.clientX);\n        window.addEventListener('touchmove', onTouchMove);\n    }\n\n    const onDragEnd = () => {\n        if (draggedRef.current) {\n            draggedRef.current = false;\n            // When actions list not fixed\n            if (!showActionsRef.current) {\n                leftRef.current = 0;\n            }\n        }\n    }\n    const onDragEndMouse = (event: any) => {\n        event.preventDefault();\n        window.removeEventListener(\"mousemove\", onMouseMove);\n        onDragEnd();\n    }\n\n    function onDragEndTouch(evt: any) {\n        window.removeEventListener('touchmove', onTouchMove);\n        onDragEnd();\n    }\n\n    useEffect(() => {\n        window.addEventListener('mouseup', onDragEndMouse);\n        window.addEventListener('touchend', onDragEndTouch);\n        return () => {\n            window.removeEventListener(\"mouseup\", onDragEndMouse);\n            window.removeEventListener(\"touchend\", onDragEndTouch);\n        }\n    }, [])\n\n    return (\n        <div\n            className=\"swipe-wrapper\"\n        >\n            <div\n                className=\"swipe-able\"\n                ref={listElement}\n                draggable=\"true\"\n                onMouseDown={onDragStartMouse}\n                onTouchStart={onDragStartTouch}\n            >\n                {children}\n            </div>\n            <div className=\"swipe-actions\" ref={actionsRef}>\n                {actions}\n            </div>\n        </div>\n    )\n}\n","export * from './component';\nexport * from './props';\n","import '../Swipeable/style.css';\n\nexport const SwipeableAction = ({ text, backgroundColor }) => {\n    return (\n        <div className=\"action\" style={{backgroundColor}}>{text}</div>\n    )\n}\n","import './App.css';\nimport {Swipeable} from \"./Swipeable\";\nimport {SwipeableAction} from \"./SwipeableAction\";\n\nfunction App() {\n  const list = [\n    {\n      id: 10,\n      title: 'Title 1',\n      description: 'Description 1'\n    },\n    {\n      id: 20,\n      title: 'Title 2',\n      description: 'Description 2'\n    }\n  ]\n  return (\n    <div className=\"app\">\n      <ul className=\"list\">\n        {list.map(item => <li key={item.id}>\n          <Swipeable actions={[<SwipeableAction key={1} text=\"Read\" backgroundColor=\"blue\"/>, <SwipeableAction key={3} text=\"Delete\" backgroundColor=\"red\"/>]}>\n            <div className=\"item\">\n              <div>\n                <h3>{item.title}</h3>\n                <small>{item.description}</small>\n              </div>\n            </div>\n          </Swipeable>\n        </li>)}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}